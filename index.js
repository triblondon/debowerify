var path = require('path');
var through = require('through');
var falafel = require('falafel');
var fs = require('fs');

var jsFileExt = /\.(js|coffee|ls)$/;

module.exports = function (file) {
  var data = '', bowerdir, config;

  // Ensure file is JavaScript
  if (!jsFileExt.test(file)) return through();

  // Find the file's bower.json and closest bower_components dir
  // Since this will include both local files and components, the bower.json file may be local, or generated by bower.  Allow for either.
  var d = path.dirname(file);
  while (d.length > 1 && (!bowerdir || !config)) {
    if (!bowerdir && fs.existsSync(d+'/bower_components')) bowerdir = d+'/bower_components';
    if (!config && fs.existsSync(d+'/.bower.json')) config = JSON.parse(fs.readFileSync(d+'/.bower.json'));
    if (!config && fs.existsSync(d+'/bower.json')) config = JSON.parse(fs.readFileSync(d+'/bower.json'));
    d = path.dirname(d);
  }
  if (!bowerdir || !config) return through();

  var tr = through(write, end);
  return tr;

  function write (buf) { data += buf; }
  function end () {
    var output;
    try { output = parse(); }
    catch (err) {
      tr.emit('error', new Error(
        err.toString().replace('Error: ', '') + ' (' + file + ')')
      );
    }
    tr.queue(String(output));
    tr.queue(null);
  }

  function parse () {
    var output = falafel(data, function (node) {
      var mainModule;

      // Find require() calls
      if (node.type === 'CallExpression' && node.callee.type === 'Identifier' && node.callee.name === 'require') {
        var moduleName = node.arguments[0].value;

        // Check that the required component is a listed dependency of the current component
        if (config.dependencies[moduleName]) {

          // Fetch the required component's package config (since it's been installed by bower, use the generated config)
          var modconfig = bowerdir+'/'+moduleName+'/.bower.json';
          if (fs.existsSync(modconfig)) modconfig = JSON.parse(fs.readFileSync(modconfig));
          if (modconfig.main) {

            // Choose the first file from 'main' with a JS extension
            if (!Array.isArray(modconfig.main)) modconfig.main = [modconfig.main];
            for (var i=0, s=modconfig.main.length; i<s && !mainModule; i++) {
              if (jsFileExt.test(modconfig.main[i])) mainModule = modconfig.main[i];
            }
          }

          // If 'main' wasn't specified by this component, or none of the files in main are JS,
          // assume that the main file is moduleName.js
          if (!mainModule) mainModule = moduleName + '.js';

          var fullModulePath = path.resolve(path.join(bowerdir, moduleName, mainModule));
          var relativeModulePath = './' + path.relative(path.dirname(file), fullModulePath);
          node.arguments[0].update(JSON.stringify(relativeModulePath));
        }
      }
    });
    return output;
  }
};
